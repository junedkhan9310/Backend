///////////////////**Index.js*********///////////////

// require('dotenv').config({path:'./env'})
// we can use above import but it'll change consistency of our importing statement so we use this
import dotenv from "dotenv"


// import mongoose from "mongoose";
// //now connecting mongoose to the database
// import { DB_NAME } from "./constants";
import connectDB from "./db/index.js";

dotenv.config({
    path:'./env'
})

connectDB()


/* 
import express from "express"
const app = express()
(async()=>{
    try {
       await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
       app.on("error",(error)=>{
        console.log("error:-",err);
        throw error
       })
       app.listen(process.env.PORT,()=>{
        console.log(`app is listening of ${process.env.PORT}`);
       })



    } catch (error) {
        console.log("error",error);
        throw err
    }
})()
    */



//video uploader 
//1-deletion try


// const deleteVideo = asynchadnler(async (req, res) => {
//     const videoId  = req.params['_id'];
//     //TODO: delete video
//     //1-search videofile(link) from database
//     //2-run deleteon cloudinary using that link and update db string to empty
    
//     const video= await Video.findById(videoId)
    
//     try {
//         const message= await VideodeleteOnCloudinary(video.videoFIle);
//         // await deleteOnCloudinary(video.thumbnail)
//         video.videoFIle = '';
//         // video.thumbnail = '';
//         await video.save();
            
//         res.status(200).json(new ApiResponse(200,message,"succesfully deleted"))
        
//     } catch (error) {
//         res.status(500).json(new ApiError(500, error.message));

//     }
// })


   // MyModel.deleteOne({ name: 'John Doe' })
    // .then((result) => {
    //     console.log(result); // Returns information about the deletion
    // })
    // .catch((err) => {
    //     console.error(err);
    // });

    // try {
    //     const video= await Video.findById(videoId)
    //     const message =await VideodeleteOnCloudinary(video.videoFIle)
        
    //     if(!message){
    //         throw new ApiError(502,"error while deletin gthe video")
    //     }
    //     else{
    //         await deleteOnCloudinary(video.thumbnail)
    //         await Video.deleteOne({_id:'video._id'})
    //     }
        
    // } catch (error) {
    //     throw new ApiError(500,"error deleting from the video")
    // }